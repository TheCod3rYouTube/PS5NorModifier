name: Create Release

on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
    branches:
      - main

env:
  MAJOR_VERSION: "1"
  MINOR_VERSION: "1"

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: UART-CL-*
          path: artifacts
          run-id: ${{ github.event.workflow_run.id }}

      - name: Calculate next version
        id: version
        run: |
          # Get the base version
          BASE_VERSION="${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}"
          
          # Fetch all tags
          git fetch --tags
          
          # Get count of existing tags that match our base version
          TAG_COUNT=$(git tag -l "v${BASE_VERSION}.*" | wc -l)
          
          # Use tag count as patch version
          PATCH_VERSION="$TAG_COUNT"
          
          # Set the full version
          FULL_VERSION="v${BASE_VERSION}.${PATCH_VERSION}"
          echo "new_tag=${FULL_VERSION}" >> $GITHUB_OUTPUT
          
          # Generate changelog
          PREV_TAG=$(git tag -l "v${BASE_VERSION}.*" | sort -V | tail -n 1 || echo "")
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag, use all commits
            CHANGELOG=$(git log --pretty=format:"* %s" || echo "Initial release")
          else
            # Get commits since last tag
            CHANGELOG=$(git log --pretty=format:"* %s" ${PREV_TAG}..HEAD || echo "No changes")
          fi
          {
            echo "changelog<<EOF"
            echo "## What's Changed"
            echo "${CHANGELOG}"
            echo "## How to use"
            echo "This section is still a WIP, I will update it once I am able to better test out the execution of the files we are generating."
            echo "### Windows"
            echo "After downloading the windows binary, you should just be able to run the executable and after allowing it to run, you should be able to use it."
            echo "### MacOS"
            echo "After downloading the macos binary, you will need to run the `UART-CL By TheCod3r` command once to have macos gatekeeper block it, from there you can open your settings app, then scroll down to Security section and find the blocked app. Note a seperate lib for serial connections for macos is required which is why `libSystem.IO.Ports.Native.dylib` exists, it too will be blocked and will require unblocking."
            echo "### Linux"
            echo "Theoretically this works on all x86_64 linux distros, if you have any issues please let me know."
            echo ""
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          name: Release ${{ steps.version.outputs.new_tag }}
          body: ${{ steps.version.outputs.changelog }}
          files: |
            artifacts/UART-CL-linux-x64/**/*
            artifacts/UART-CL-osx-arm64/**/*
            artifacts/UART-CL-win-x64/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 