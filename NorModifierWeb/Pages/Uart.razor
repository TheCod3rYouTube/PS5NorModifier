@page "/uart"

@using NorModifierLib.Interfaces
@using NorModifierLib.Data
@using NorModifierWeb.Data

<MudOverlay DarkBackground="true" Visible="!_serialSupported">
    <MudText Typo="Typo.h6" Class="text-center">This browser does not support the WebSerial API.</MudText>
</MudOverlay>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ImportExport" OnClick="ReadErrors">
                Read Errors from UART
            </MudButton>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Clear" OnClick="ClearErrors">
                Clear Errors from UART
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudDivider Class="my-4" />

    <MudTable T="UartError" Items="_errors" Dense="true">
        <NoRecordsContent>
            <MudText Align="Align.Center">No errors.</MudText>
        </NoRecordsContent>
        <HeaderContent>
            <MudTh>Error</MudTh>
            <MudTh>RTC</MudTh>
            <MudTh>Power State</MudTh>
            <MudTh>Boot Cause</MudTh>
            <MudTh>Device Power</MudTh>
            <MudTh>Sequence Number</MudTh>
            <MudTh>Env Temp</MudTh>
            <MudTh>SoC Temp</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudText Typo="Typo.caption">@($"{context.RawCode:X8}")</MudText>
                <MudText>@context.Code</MudText>
            </MudTd>
            <MudTd>
                <MudText Typo="Typo.caption">@($"{context.Rtc:X8}")</MudText>
                <MudText>@context.Rtc</MudText>
            </MudTd>
            <MudTd>
                <MudText Typo="Typo.caption">@($"{context.RawPowerState:X8}")</MudText>
                <MudText>@context.PowerStateA - @context.PowerStateB</MudText>
            </MudTd>
            <MudTd>
                <MudText Typo="Typo.caption">@($"{context.RawBootCause:X8}")</MudText>
                <MudText>@context.BootCause</MudText>
            </MudTd>
            <MudTd>
                <MudText Typo="Typo.caption">@($"{context.RawDevicePowerManagement:X4}")</MudText>
                <div>
                    <MudText Inline="true" Color="@(context.HdmiPower ? Color.Success : Color.Error)">HDMI</MudText>
                    <MudText Inline="true" Color="@(context.BddPower ? Color.Success : Color.Error)">BDD</MudText>
                    <MudText Inline="true" Color="@(context.HdmiCecPower ? Color.Success : Color.Error)">HDMI-CEC</MudText>
                    <MudText Inline="true" Color="@(context.UsbPower ? Color.Success : Color.Error)">USB</MudText>
                    <MudText Inline="true" Color="@(context.WifiPower ? Color.Success : Color.Error)">WiFi</MudText>
                </div>
            </MudTd>
            <MudTd>
                <MudText Typo="Typo.caption">@($"{context.RawSequenceNumber:X4}")</MudText>
                <MudText>@context.SequenceNumber</MudText>
            </MudTd>
            <MudTd>
                <MudText Typo="Typo.caption">@($"{context.RawEnvironmentTemperature:X4}")</MudText>
                <MudText>@context.EnvironmentTemperature</MudText>
            </MudTd>
            <MudTd>
                <MudText Typo="Typo.caption">@($"{context.RawChipTemperature:X4}")</MudText>
                <MudText>@context.ChipTemperature</MudText>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code
{
    [Inject]
    private ILogger<Home> logger { get; set; } = default!;

    [Inject]
    private IDialogService dialogService { get; set; } = default!;

    [Inject]
    private WebSerialPort serialPort { get; set; } = default!;

    [Inject]
    private IUartService uartService { get; set; } = default!;

    private bool _serialSupported;

    private IEnumerable<UartError> _errors = [];
    private Dictionary<int, bool> _showRawError = new();

    protected override async Task OnInitializedAsync()
    {
        _serialSupported = await serialPort.IsSupported();
    }

    /// <summary>
    /// Attempts to open the web serial port and read the error messages from the UART.
    /// </summary>
    /// <returns>A Task for the error read operation.</returns>
    private async Task ReadErrors()
    {
        // Attempt to open the web serial port, if unsuccessful, show an error message and return
        if (!await serialPort.OpenAsync())
        {
            await dialogService.ShowMessageBox("Error", "Failed to open serial port.", "OK");
            return;
        }

        // Attempt to read the error messages from the UART, if unsuccessful, log the error and show an error message
        try
        {
            _errors = await uartService.GetErrorsAsync(serialPort);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error reading UART errors");
            await dialogService.ShowMessageBox("Error", "Failed to read errors from UART.", "OK");
        }
        finally
        {
            await serialPort.CloseAsync();
        }
    }

    /// <summary>
	/// Attempts to open the web se rial port and clear the error messages from the UART.
	/// </summary>
	/// <returns>A Task for the error clear operation.</returns>
	private async Task ClearErrors()
    {
		// Attempt to open the web serial port, if unsuccessful, show an error message and return
        if (!await serialPort.OpenAsync())
        {
            await dialogService.ShowMessageBox("Error", "Failed to connect to UART.", "OK");
            return;
        }

		// Attempt to clear the error messages from the UART, if unsuccessful, log the error and show an error message
        try
        {
            await uartService.ClearErrorsAsync(serialPort);
            await dialogService.ShowMessageBox("Success", "Error log has been cleared.", "OK");
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error clearing UART errors");
            await dialogService.ShowMessageBox("Error", "Failed to clear errors from UART.", "OK");
        }
        finally
        {
            await serialPort.CloseAsync();
        }
    }
}